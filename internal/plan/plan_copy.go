// Generated by "gencopy -o plan_copy.go . Plan Layer Service Check HTTPCheck:c TCPCheck:c ExecCheck:c"; DO NOT EDIT.

package plan

// Copy returns a deep copy of the Plan.
func (p *Plan) Copy() *Plan {
	copied := *p
	if p.Layers != nil {
		copied.Layers = make([]*Layer, len(p.Layers))
		for i, v := range p.Layers {
			copied.Layers[i] = v.Copy()
		}
	}
	if p.Services != nil {
		copied.Services = make(map[string]*Service, len(p.Services))
		for k, v := range p.Services {
			copied.Services[k] = v.Copy()
		}
	}
	if p.Checks != nil {
		copied.Checks = make(map[string]*Check, len(p.Checks))
		for k, v := range p.Checks {
			copied.Checks[k] = v.Copy()
		}
	}
	return &copied
}

// Copy returns a deep copy of the Layer.
func (l *Layer) Copy() *Layer {
	copied := *l
	if l.Services != nil {
		copied.Services = make(map[string]*Service, len(l.Services))
		for k, v := range l.Services {
			copied.Services[k] = v.Copy()
		}
	}
	if l.Checks != nil {
		copied.Checks = make(map[string]*Check, len(l.Checks))
		for k, v := range l.Checks {
			copied.Checks[k] = v.Copy()
		}
	}
	return &copied
}

// Copy returns a deep copy of the Service.
func (s *Service) Copy() *Service {
	copied := *s
	if s.After != nil {
		copied.After = make([]string, len(s.After))
		copy(copied.After, s.After)
	}
	if s.Before != nil {
		copied.Before = make([]string, len(s.Before))
		copy(copied.Before, s.Before)
	}
	if s.Requires != nil {
		copied.Requires = make([]string, len(s.Requires))
		copy(copied.Requires, s.Requires)
	}
	if s.Environment != nil {
		copied.Environment = make(map[string]string, len(s.Environment))
		for k, v := range s.Environment {
			copied.Environment[k] = v
		}
	}
	if s.UserID != nil {
		v := *s.UserID
		copied.UserID = &v
	}
	if s.GroupID != nil {
		v := *s.GroupID
		copied.GroupID = &v
	}
	if s.OnCheckFailure != nil {
		copied.OnCheckFailure = make(map[string]ServiceAction, len(s.OnCheckFailure))
		for k, v := range s.OnCheckFailure {
			copied.OnCheckFailure[k] = v
		}
	}
	return &copied
}

// Copy returns a deep copy of the Check.
func (c *Check) Copy() *Check {
	copied := *c
	if c.HTTP != nil {
		copied.HTTP = c.HTTP.Copy()
	}
	if c.TCP != nil {
		copied.TCP = c.TCP.Copy()
	}
	if c.Exec != nil {
		copied.Exec = c.Exec.Copy()
	}
	return &copied
}

// Copy returns a deep copy of the HTTPCheck.
func (c *HTTPCheck) Copy() *HTTPCheck {
	copied := *c
	if c.Headers != nil {
		copied.Headers = make(map[string]string, len(c.Headers))
		for k, v := range c.Headers {
			copied.Headers[k] = v
		}
	}
	return &copied
}

// Copy returns a deep copy of the TCPCheck.
func (c *TCPCheck) Copy() *TCPCheck {
	copied := *c
	return &copied
}

// Copy returns a deep copy of the ExecCheck.
func (c *ExecCheck) Copy() *ExecCheck {
	copied := *c
	if c.Environment != nil {
		copied.Environment = make(map[string]string, len(c.Environment))
		for k, v := range c.Environment {
			copied.Environment[k] = v
		}
	}
	if c.UserID != nil {
		v := *c.UserID
		copied.UserID = &v
	}
	if c.GroupID != nil {
		v := *c.GroupID
		copied.GroupID = &v
	}
	return &copied
}
